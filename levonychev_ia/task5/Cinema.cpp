//Разработать классы Билетная касса и Кинотеатр.
// 
//Класс Билетная касса должен имитировать работу кассы по продаже билетов на киносеансы в многозальном кинотеатре.
//Считать, что продажа билетов проводится на сеансы в пределах трех дней от текущей даты.
//Каждый сеанс описывается датой, временем начала сеанса, названием фильма, номером зала, стоимостью билета в зависимости от зоны(VIP и обычная).
//Для упрощения считать, что покупатель указывает тип зоны и требуемое число билетов, а места выделяются кассой автоматически(при наличии свободных).
//Зрительные места в каждом зале описываются номером ряда и номером в ряду.
//Для упрощения считать, что число мест во всех рядах в одном зале одинаково.
//Продажа билетов на сеанс прекращается через 10 минут после начала сеанса.
//Информация о всех сеансах на ближайшие 30 дней проката хранится в классе Кинотеатр.
//Для каждого зала установлена базовая стоимость билетов(на дневные сеансы – от 12.00 до 18.00).
//Стоимость билетов на утренние сеансы(до 12.00) составляет 75 % от базовой, стоимость билетов на вечерние сеансы(после 18.00) – 150 % от базовой.
//Информация о зрительных местах(свободно / занято) в каждом зале на каждом сеансе также хранится в классе Кинотеатр.
// 
//Класс Билетная касса должен предоставлять следующие операции: 
//1) принять данные покупателя : дату, время сеанса, название фильма, номер зала, тип зоны, число мест, 
//2) проверить наличие требуемого количества свободных мест в требуемой зоне, 
//3) зарезервировать требуемое количество мест, 
//4) рассчитать общую стоимость билетов, 
//5) отменить заказ билетов, 
//6) сформировать билеты(каждый билет включает : дату, время сеанса, название фильма, номер зала, номер ряда, номер места в ряду).

//Класс Кинотеатр должен использоваться для поддержки работы класса Билетная касса и может быть разработан в минимально - необходимом варианте.
#include "Cinema.h"
#include <iostream>
Hall::Hall(unsigned hall_number_, unsigned row_count_, unsigned seat_count_) : hall_number(hall_number_), row_count(row_count_), seat_count(seat_count_) {}



void Cinema::add_hall( Hall& a)
{
	for (Hall& b : halls)
	{
		if (b.hall_number == a.hall_number)
		{
			throw std::invalid_argument("The hall already exists!");
		}
	}
	halls.push_back(a);
}
void Cinema::add_movie_session(Date date, Time time, std::string name, Hall hall, double base_cost)
{	
	movie_sessions.push_back({ date, time, name, hall, base_cost});
}
void Cinema::info()
{	
	using namespace std;
	int i = 1;
	for (MovieSession& a : movie_sessions)
	{
		cout << i << "." << endl;
		cout << "Name: " << a.name << endl;
		cout << "Hall " << a.hall.hall_number << endl;
		cout << "Date: " << a.date << endl;
		cout << "Time: " << a.time << endl;
		cout << "Base price: " << a.base_cost << "p." << endl << endl;
		++i;
	}
}